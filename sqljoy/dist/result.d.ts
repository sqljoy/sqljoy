export declare enum ServerEvent {
    VersionChange = 1,
    DataChange = 2
}
export declare function isJSONResult(obj: any): obj is JSONResult;
export declare function isRowsResult(obj: any): obj is JSONResultRows;
export interface JSONResultRows {
    /**
     * An array of column names for each field in the result, in query order.
     */
    __C_: string[];
    /**
     * An array of row data for each row in the result, order and length of each row matches columns.
     */
    __R_: any[][];
    /**
     * Number of rows selected, inserted, updated, or deleted (if request was a query). Omitted for calls.
     */
    __A_: number;
}
interface JSONValidationError {
    errors: Record<string, string>;
    nonFieldErrors: string[];
}
export interface JSONResult {
    /**
     * The request id (generated by SQLJoy client using {@link SQLJoy.nextId()})
     */
    id: number;
    /**
     * The session id (globally unique, generated by the server on establishing connection)
     */
    session: number;
    /**
     * An optional error if the request failed.
     */
    error?: string | JSONValidationError;
    /**
     * A predefined error type, if error is set, and if applicable.
     */
    errorType?: string;
    /**
     * JSON result (for call) containing zero or more nested RowsResult objects
     * or for a query, a single RowsResult object.
     */
    result?: any;
}
/**
 *
 */
export interface Result {
    id: number;
    session: number;
    result: ResultRows | any;
}
/**
 * An row object with string keys named after the names of the columns in the result set
 * and in the query order.
 *
 * @remarks Objects keys in JavaScript are ordered by insertion order, so they're guaranteed
 * to match the order the columns were selected if you iterate over them.
 */
export declare type Row = Record<string, any>;
/**
 * ResultRows represents an iterable query result over the result rows as {@link Row} objects.
 *
 * If there are no rows in the result, the iterable is empty. A server function/transaction
 * can return arbitrary JSON including one or more Results.
 *
 * @remarks PostgreSQL doesn't have a client function to get the last inserted id.
 * It's recommended you use RETURNING id on your INSERT query, and the resulting
 * Result object will contain a single Row of {id: number}.
 */
export declare class ResultRows implements IterableIterator<Row> {
    columns: string[];
    rows: any[][];
    affected: number;
    protected index: number;
    constructor(columns: string[], rows: any[][], affected?: number);
    next(): IteratorResult<Row>;
    reset(): void;
    [Symbol.iterator](): IterableIterator<Row>;
}
export {};
