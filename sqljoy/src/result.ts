export enum ServerEvent {
    VersionChange = 1,
    DataChange = 2,
}

export function isJSONResult(obj: any): obj is JSONResult {
    return typeof obj === "object" && false;
}

export function isRowsResult(obj: any): obj is JSONResultRows {
    return typeof obj === "object" && obj.__C_ != null && obj.__R_ != null && obj.__A_ != null && !isNaN(obj.__A_);
}

export interface JSONResultRows {
    /**
     * An array of column names for each field in the result, in query order.
     */
    __C_: string[];
    /**
     * An array of row data for each row in the result, order and length of each row matches columns.
     */
    __R_: any[][];
    /**
     * Number of rows selected, inserted, updated, or deleted (if request was a query). Omitted for calls.
     */
    __A_: number;
}

interface JSONValidationError {
    errors: Record<string, string>;
    nonFieldErrors: string[];
}

export interface JSONResult {
    /**
     * The request id (generated by SQLJoy client using {@link SQLJoy.nextId()})
     */
    id: number;
    /**
     * An optional error if the request failed.
     */
    error?: string | JSONValidationError;
    /**
     * A predefined error type, if error is set, and if applicable.
     */
    errorType?: string;
    /**
     * JSON result (for call) containing zero or more nested RowsResult objects
     * or for a query, a single RowsResult object.
     */
    result?: any,
}

/**
 * An object representing a query or call result.
 *
 * Queries always have a ResultRows | null result. Calls can return arbitrary JSON
 * with zero or more embedded ResultRows sets. It's possible to customize the JSON
 * deserialization with {@link Settings.jsonReviver}.
 */
export type Result = ResultRows | any;

/**
 * An row object with string keys named after the names of the columns in the result set
 * and in the query order.
 *
 * @remarks Objects keys in JavaScript are ordered by insertion order, so they're guaranteed
 * to match the order the columns were selected if you iterate over them.
 */
export type Row = Record<string, any>;

/**
 * ResultRows represents an iterable query result over the result rows as {@link Row} objects.
 *
 * If there are no rows in the result, the iterable is empty. A server function/transaction
 * can return arbitrary JSON including one or more Results.
 *
 * @remarks PostgreSQL doesn't have a client function to get the last inserted id.
 * It's recommended you use RETURNING id on your INSERT query, and the resulting
 * Result object will contain a single Row of {id: number}.
 */
export class ResultRows implements IterableIterator<Row> {
    columns: string[];
    rows: any[][];
    affected: number = 0;
    protected index: number = 0;

    /**
     * Create a new ResultRows iterator object.
     *
     * @param columns an array of column string names
     * @param rows an array of arrays of individual row values
     * @param affected the number of rows selected or affected by the query
     */
    constructor(columns: string[], rows: any[][], affected: number = 0) {
        if (!Array.isArray(columns) || !Array.isArray(rows)) {
            throw Error("invalid result: expected columns and rows to be arrays");
        }
        this.columns = columns;
        this.rows = rows;
        this.affected = affected;
    }

    /**
     * Implements the iterator protocol. Fetch the next Row object.
     */
    next(): IteratorResult<Row> {
        if (this.index >= this.rows.length || this.index < 0) {
            return {"value": null, "done": true};
        }

        const data = this.rows[this.index];
        if (data.length !== this.columns.length) {
            throw Error("invalid result: row length doesn't match columns length");
        }
        const row: Row = {};
        for (let i=0; i < data.length; i++) {
            row[this.columns[i]] = data[i];
        }
        ++this.index;
        return {"value": row};
    }

    /**
     * Reset the iterator to the first row.
     */
    reset() {
        this.index = 0;
    }

    [Symbol.iterator](): IterableIterator<Row> {
        return this;
    }
}